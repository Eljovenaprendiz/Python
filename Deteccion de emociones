#pip install transformers torch sentencepiece
#pip install python-docx PyMuPDF
#pip install transformers torch sentencepiece python-docx PyMuPDF

import os
import docx  # Para archivos .docx
import fitz  # PyMuPDF para archivos .pdf
from IPython.display import display, Markdown
# Importamos la clase 'pipeline', que es la forma m√°s sencilla de usar modelos pre-entrenados
from transformers import pipeline

# Creamos nuestro pipeline de an√°lisis
# Tarea: "text-classification" para clasificar texto
# Modelo: uno especializado en emociones en espa√±ol
# return_all_scores=True nos mostrar√° la puntuaci√≥n para cada una de las 6 emociones
emotion_pipeline = pipeline(
    "text-classification",
    model="pysentimiento/robertuito-emotion-analysis",
    return_all_scores=True
)

print("‚úÖ Modelo cargado y listo para usar.")

# --- FUNCI√ìN 1: Extraer texto de .docx ---
def extraer_texto_de_docx(ruta_archivo):
    try:
        documento = docx.Document(ruta_archivo)
        return "\n".join([p.text for p in documento.paragraphs])
    except Exception as e:
        print(f"‚ùå Error al leer el archivo DOCX: {e}")
        return None

# --- FUNCI√ìN 2: Extraer texto de .pdf ---
def extraer_texto_de_pdf(ruta_archivo):
    try:
        with fitz.open(ruta_archivo) as doc:
            return "".join([pagina.get_text() for pagina in doc])
    except Exception as e:
        print(f"‚ùå Error al leer el archivo PDF: {e}")
        return None

# --- FUNCI√ìN 3: Analizar el texto y mostrar el resultado ---
def analizar_y_mostrar_emocion(texto):
    """
    Toma un bloque de texto, lo analiza y muestra la emoci√≥n principal.
    Si la emoci√≥n principal es 'others', tambi√©n muestra la siguiente m√°s probable.
    """
    if not texto or not texto.strip():
        print("‚ö†Ô∏è El texto est√° vac√≠o, no hay nada que analizar.")
        return

    print("\nüß† Analizando...")
    resultado_completo = emotion_pipeline(texto, truncation=True)[0]
    
    # Ordenamos todas las emociones detectadas de mayor a menor confianza
    emociones_ordenadas = sorted(resultado_completo, key=lambda x: x['score'], reverse=True)
    
    # La emoci√≥n principal es la primera de la lista
    emocion_principal = emociones_ordenadas[0]
    etiqueta_principal = emocion_principal['label']
    puntuacion_principal = emocion_principal['score']
    
    emoji_map = {
        'joy': 'üòä Alegr√≠a', 'anger': 'üò° Ira', 'fear': 'üò® Miedo',
        'surprise': 'üòÆ Sorpresa', 'sadness': 'üò¢ Tristeza', 'disgust': 'ü§¢ Asco',
        'others': 'üòê Neutral / Otra'
    }

    # Mostramos el resultado principal
    display(Markdown(f"## ‚ú® Emoci√≥n Principal Detectada: **{emoji_map.get(etiqueta_principal, etiqueta_principal)}**"))
    display(Markdown(f"#### Confianza del modelo: **{puntuacion_principal:.2%}**"))

    # Si la emoci√≥n principal es 'others' y hay m√°s de una emoci√≥n detectada,
    # mostramos la segunda m√°s probable para tener m√°s contexto.
    if etiqueta_principal == 'others' and len(emociones_ordenadas) > 1:
        emocion_secundaria = emociones_ordenadas[1]
        etiqueta_secundaria = emocion_secundaria['label']
        puntuacion_secundaria = emocion_secundaria['score']
        
        display(Markdown(f"### Emoci√≥n Subyacente m√°s probable: **{emoji_map.get(etiqueta_secundaria, etiqueta_secundaria)}** ({puntuacion_secundaria:.2%})"))


while True:
    # 1. Imprimir el men√∫ de opciones
    print("\n" + "="*50)
    print("ü§ñ ¬øQu√© te gustar√≠a hacer?")
    print("1. Introducir un texto manualmente")
    print("2. Analizar un archivo (.docx o .pdf)")
    print("3. Salir del programa")
    print("="*50)

    # 2. Pedir la elecci√≥n al usuario
    eleccion = input("Elige una opci√≥n (1, 2 o 3): ")

    # 3. Procesar la elecci√≥n
    if eleccion == '1':
        # Opci√≥n para texto manual
        texto_manual = input("\nüìù Pega o escribe el texto que quieres analizar:\n")
        analizar_y_mostrar_emocion(texto_manual)

    elif eleccion == '2':
        # Opci√≥n para analizar archivo
        ruta_archivo = input("\nüìÇ Introduce la ruta completa de tu archivo y presiona Enter: ").strip().strip('"')
        
        if not os.path.exists(ruta_archivo):
            print(f"‚ùå Error: No se pudo encontrar el archivo en la ruta:\n'{ruta_archivo}'")
            continue # Vuelve al inicio del bucle

        # Extraer texto seg√∫n la extensi√≥n
        texto_extraido = None
        if ruta_archivo.lower().endswith('.docx'):
            texto_extraido = extraer_texto_de_docx(ruta_archivo)
        elif ruta_archivo.lower().endswith('.pdf'):
            texto_extraido = extraer_texto_de_pdf(ruta_archivo)
        else:
            print("‚ö†Ô∏è Formato no soportado. Por favor, elige un archivo .docx o .pdf.")
            continue # Vuelve al inicio del bucle
        
        analizar_y_mostrar_emocion(texto_extraido)

    elif eleccion == '3':
        # Opci√≥n para salir
        print("\nüëã ¬°Hasta pronto! El programa ha finalizado.")
        break # Rompe el bucle y termina la ejecuci√≥n

    else:
        # Opci√≥n no v√°lida
        print("\n‚ùå Opci√≥n no v√°lida. Por favor, introduce 1, 2 o 3.")
